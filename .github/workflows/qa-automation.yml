name: 🤖 QA Automation - Appium Tests

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - auth
        - registration
        - login
      platform:
        description: 'Platform to test'
        required: true
        default: 'android'
        type: choice
        options:
        - android
        - ios
        - both
      environment:
        description: 'Test environment'
        required: true
        default: 'ci'
        type: choice
        options:
        - ci
        - staging
        - production

env:
  JAVA_VERSION: '11'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.x'
  ANDROID_API_LEVEL: '30'
  ANDROID_BUILD_TOOLS: '30.0.3'
  ANDROID_AVD_API_LEVEL: '30'

jobs:
  # Backend API Tests (prerequisite for mobile tests)
  backend-tests:
    name: 🔧 Backend API Tests
    runs-on: ubuntu-latest
    outputs:
      api-status: ${{ steps.api-test.outputs.status }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐹 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    
    - name: 🧪 Run Backend Tests
      id: api-test
      working-directory: ./smor_ting_backend
      run: |
        go mod download
        go test ./tests/... -v -timeout=30m
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: 📊 Upload Backend Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: smor_ting_backend/test-results/

  # Build Flutter App for Testing
  build-flutter-app:
    name: 🏗️ Build Flutter App
    runs-on: ubuntu-latest
    needs: backend-tests
    strategy:
      matrix:
        platform: [android, ios]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 📱 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: 📦 Flutter Dependencies
      working-directory: ./smor_ting_mobile
      run: |
        flutter pub get
        flutter pub run build_runner build --delete-conflicting-outputs
    
    - name: 🔧 Flutter Doctor
      run: flutter doctor -v
    
    - name: 🤖 Build Android APK
      if: matrix.platform == 'android'
      working-directory: ./smor_ting_mobile
      run: |
        flutter build apk --debug --verbose
        ls -la build/app/outputs/flutter-apk/
    
    - name: 🍎 Setup iOS Build (macOS only)
      if: matrix.platform == 'ios' && runner.os == 'macOS'
      working-directory: ./smor_ting_mobile
      run: |
        flutter build ios --simulator --debug --verbose
        ls -la build/ios/iphonesimulator/
    
    - name: 📤 Upload App Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flutter-app-${{ matrix.platform }}
        path: |
          smor_ting_mobile/build/app/outputs/flutter-apk/app-debug.apk
          smor_ting_mobile/build/ios/iphonesimulator/Runner.app
        retention-days: 5

  # Android QA Testing
  android-qa-tests:
    name: 🤖 Android QA Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, build-flutter-app]
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' || github.event.inputs.platform == ''
    
    strategy:
      fail-fast: false
      matrix:
        api-level: [30, 33]
        test-suite: 
          - ${{ github.event.inputs.test_suite || 'all' }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: smor_ting_mobile/appium/package.json
    
    - name: 📥 Download Flutter App
      uses: actions/download-artifact@v4
      with:
        name: flutter-app-android
        path: smor_ting_mobile/build/app/outputs/flutter-apk/
    
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: ${{ matrix.api-level }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk: '25.1.8937393'
        cmake: '3.22.1'
    
    - name: 🎯 Create Android AVD
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        cores: 2
        ram-size: 4096M
        heap-size: 512M
        sdcard-path-or-size: 100M
        avd-name: test_avd_${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: echo "AVD created"
    
    - name: 📦 Install Appium & Dependencies
      working-directory: ./smor_ting_mobile/appium
      run: |
        npm install -g appium@next
        appium driver install uiautomator2
        appium driver install --source=npm appium-flutter-driver
        pip install -r requirements.txt
        appium driver doctor uiautomator2 || true
        appium driver doctor flutter || true
    
    - name: 🚀 Start Appium Server
      working-directory: ./smor_ting_mobile/appium
      run: |
        mkdir -p reports/logs
        appium server --port 4723 --log reports/logs/appium.log --log-level info &
        sleep 10
        curl -s http://127.0.0.1:4723/status
    
    - name: 🧪 Run Android Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        avd-name: test_avd_${{ matrix.api-level }}
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        disable-animations: true
        script: |
          cd smor_ting_mobile/appium
          export PLATFORM=android
          export ENVIRONMENT=ci
          export ANDROID_API_LEVEL=${{ matrix.api-level }}
          
          # Wait for emulator to be ready
          adb wait-for-device
          while [ "$(adb shell getprop sys.boot_completed)" != "1" ]; do
            echo "Waiting for emulator to boot..."
            sleep 5
          done
          
          # Run tests based on suite selection
          ./scripts/run_android_tests.sh \
            --suite ${{ matrix.test-suite }} \
            --environment ci \
            --device test_avd_${{ matrix.api-level }}
    
    - name: 📊 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-test-results-api${{ matrix.api-level }}-${{ matrix.test-suite }}
        path: |
          smor_ting_mobile/appium/reports/
          !smor_ting_mobile/appium/reports/**/*.log
        retention-days: 30
    
    - name: 📈 Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Android Tests (API ${{ matrix.api-level }}) - ${{ matrix.test-suite }}
        path: smor_ting_mobile/appium/reports/android-junit-*.xml
        reporter: java-junit
        fail-on-error: false

  # iOS QA Testing (macOS only)
  ios-qa-tests:
    name: 🍎 iOS QA Tests
    runs-on: macos-13
    needs: [backend-tests, build-flutter-app]
    if: (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both') && runner.os == 'macOS'
    
    strategy:
      fail-fast: false
      matrix:
        ios-version: ['16.4', '17.0']
        device: ['iPhone 13', 'iPhone 14']
        test-suite:
          - ${{ github.event.inputs.test_suite || 'all' }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: smor_ting_mobile/appium/package.json
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: 📥 Download Flutter App
      uses: actions/download-artifact@v4
      with:
        name: flutter-app-ios
        path: smor_ting_mobile/build/ios/iphonesimulator/
    
    - name: 📦 Install Appium & Dependencies
      working-directory: ./smor_ting_mobile/appium
      run: |
        npm install -g appium@next
        appium driver install xcuitest
        appium driver install --source=npm appium-flutter-driver
        pip3 install -r requirements.txt
        appium driver doctor xcuitest || true
        appium driver doctor flutter || true
    
    - name: 📱 Setup iOS Simulator
      run: |
        # List available simulators
        xcrun simctl list devices available
        
        # Boot the simulator
        SIMULATOR_ID=$(xcrun simctl create "QA-iPhone-${{ matrix.device }}" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "com.apple.CoreSimulator.SimRuntime.iOS-${{ matrix.ios-version }}")
        xcrun simctl boot $SIMULATOR_ID
        
        # Wait for simulator to boot
        xcrun simctl bootstatus $SIMULATOR_ID -b
        
        echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
    
    - name: 🚀 Start Appium Server
      working-directory: ./smor_ting_mobile/appium
      run: |
        mkdir -p reports/logs
        appium server --port 4723 --log reports/logs/appium.log --log-level info &
        sleep 15
        curl -s http://127.0.0.1:4723/status
    
    - name: 🧪 Run iOS Tests
      working-directory: ./smor_ting_mobile/appium
      run: |
        export PLATFORM=ios
        export ENVIRONMENT=ci
        export IOS_VERSION="${{ matrix.ios-version }}"
        export IOS_DEVICE_NAME="${{ matrix.device }}"
        
        ./scripts/run_ios_tests.sh \
          --suite ${{ matrix.test-suite }} \
          --environment ci \
          --device "${{ matrix.device }}"
    
    - name: 📊 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-test-results-${{ matrix.ios-version }}-${{ matrix.test-suite }}
        path: |
          smor_ting_mobile/appium/reports/
          !smor_ting_mobile/appium/reports/**/*.log
        retention-days: 30
    
    - name: 📈 Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: iOS Tests (${{ matrix.ios-version }} - ${{ matrix.device }}) - ${{ matrix.test-suite }}
        path: smor_ting_mobile/appium/reports/ios-junit-*.xml
        reporter: java-junit
        fail-on-error: false

  # Test Results Summary & Deployment Gate
  qa-results-summary:
    name: 📋 QA Results Summary
    runs-on: ubuntu-latest
    needs: [android-qa-tests, ios-qa-tests]
    if: always()
    
    outputs:
      deployment-approved: ${{ steps.gate-decision.outputs.approved }}
      test-summary: ${{ steps.summarize.outputs.summary }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 📥 Download All Test Results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
    
    - name: 📊 Analyze Test Results
      id: summarize
      run: |
        echo "## 🧪 QA Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        TOTAL_TESTS=0
        PASSED_TESTS=0
        FAILED_TESTS=0
        SKIPPED_TESTS=0
        
        # Process Android results
        echo "### 🤖 Android Test Results" >> $GITHUB_STEP_SUMMARY
        for result_dir in test-results/android-test-results-*; do
          if [ -d "$result_dir" ]; then
            echo "Processing: $result_dir"
            for junit_file in "$result_dir"/reports/android-junit-*.xml; do
              if [ -f "$junit_file" ]; then
                tests=$(grep -o 'tests="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                failures=$(grep -o 'failures="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                errors=$(grep -o 'errors="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                skipped=$(grep -o 'skipped="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                
                passed=$((tests - failures - errors - skipped))
                
                TOTAL_TESTS=$((TOTAL_TESTS + tests))
                PASSED_TESTS=$((PASSED_TESTS + passed))
                FAILED_TESTS=$((FAILED_TESTS + failures + errors))
                SKIPPED_TESTS=$((SKIPPED_TESTS + skipped))
                
                echo "- Tests: $tests, Passed: $passed, Failed: $((failures + errors)), Skipped: $skipped" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
        done
        
        # Process iOS results  
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🍎 iOS Test Results" >> $GITHUB_STEP_SUMMARY
        for result_dir in test-results/ios-test-results-*; do
          if [ -d "$result_dir" ]; then
            echo "Processing: $result_dir"
            for junit_file in "$result_dir"/reports/ios-junit-*.xml; do
              if [ -f "$junit_file" ]; then
                tests=$(grep -o 'tests="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                failures=$(grep -o 'failures="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                errors=$(grep -o 'errors="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                skipped=$(grep -o 'skipped="[0-9]*"' "$junit_file" | grep -o '[0-9]*' || echo "0")
                
                passed=$((tests - failures - errors - skipped))
                
                TOTAL_TESTS=$((TOTAL_TESTS + tests))
                PASSED_TESTS=$((PASSED_TESTS + passed))
                FAILED_TESTS=$((FAILED_TESTS + failures + errors))
                SKIPPED_TESTS=$((SKIPPED_TESTS + skipped))
                
                echo "- Tests: $tests, Passed: $passed, Failed: $((failures + errors)), Skipped: $skipped" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
        done
        
        # Overall summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Overall Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "- **✅ Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "- **❌ Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "- **⏭️ Skipped**: $SKIPPED_TESTS" >> $GITHUB_STEP_SUMMARY
        
        if [ $TOTAL_TESTS -gt 0 ]; then
          PASS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
          echo "- **📊 Pass Rate**: ${PASS_RATE}%" >> $GITHUB_STEP_SUMMARY
        else
          PASS_RATE=0
          echo "- **📊 Pass Rate**: No tests executed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Store summary for other jobs
        echo "total=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "passed=$PASSED_TESTS" >> $GITHUB_OUTPUT
        echo "failed=$FAILED_TESTS" >> $GITHUB_OUTPUT
        echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
        echo "summary=Total: $TOTAL_TESTS, Passed: $PASSED_TESTS, Failed: $FAILED_TESTS, Pass Rate: ${PASS_RATE}%" >> $GITHUB_OUTPUT
    
    - name: 🚧 Deployment Gate Decision
      id: gate-decision
      run: |
        FAILED_TESTS=${{ steps.summarize.outputs.failed }}
        PASS_RATE=${{ steps.summarize.outputs.pass_rate }}
        
        # Deployment approval criteria
        MIN_PASS_RATE=80
        MAX_FAILURES=5
        
        if [ "$FAILED_TESTS" -eq 0 ] && [ "$PASS_RATE" -ge $MIN_PASS_RATE ]; then
          echo "✅ **DEPLOYMENT APPROVED** - All tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "approved=true" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
        elif [ "$FAILED_TESTS" -le $MAX_FAILURES ] && [ "$PASS_RATE" -ge $MIN_PASS_RATE ]; then
          echo "⚠️ **DEPLOYMENT APPROVED WITH CONDITIONS** - Minor failures within tolerance" >> $GITHUB_STEP_SUMMARY
          echo "approved=true" >> $GITHUB_OUTPUT
          echo "status=warning" >> $GITHUB_OUTPUT
        else
          echo "🚫 **DEPLOYMENT BLOCKED** - Too many test failures" >> $GITHUB_STEP_SUMMARY
          echo "- Failed tests: $FAILED_TESTS (max allowed: $MAX_FAILURES)" >> $GITHUB_STEP_SUMMARY
          echo "- Pass rate: $PASS_RATE% (minimum required: $MIN_PASS_RATE%)" >> $GITHUB_STEP_SUMMARY
          echo "approved=false" >> $GITHUB_OUTPUT
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const summary = `${{ steps.summarize.outputs.summary }}`;
          const approved = ${{ steps.gate-decision.outputs.approved }};
          const status = '${{ steps.gate-decision.outputs.status }}';
          
          const statusIcon = approved ? '✅' : '🚫';
          const statusText = approved ? 'DEPLOYMENT APPROVED' : 'DEPLOYMENT BLOCKED';
          
          const body = `## 🧪 QA Automation Results
          
          ${statusIcon} **${statusText}**
          
          📊 **Test Summary**: ${summary}
          
          🔗 **View detailed results**: [Test Reports](${context.payload.pull_request.html_url}/checks)
          
          ${approved ? 
            '✨ All quality gates passed! This PR is ready for deployment.' : 
            '⚠️ Quality gates failed. Please review and fix failing tests before deployment.'
          }`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: 🎯 Set Deployment Status
      if: always()
      run: |
        if [ "${{ steps.gate-decision.outputs.approved }}" = "true" ]; then
          echo "✅ Quality gates passed - deployment approved"
          exit 0
        else
          echo "❌ Quality gates failed - deployment blocked"
          exit 1
        fi

  # Create GitHub Issue on Test Failures
  create-failure-issue:
    name: 🐛 Create Failure Issue
    runs-on: ubuntu-latest
    needs: qa-results-summary
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🐛 Create Issue for Test Failures
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🚨 QA Tests Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## 🚨 QA Test Failures Detected
          
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Branch**: ${{ github.ref }}
          **Commit**: ${{ github.sha }}
          
          ### 📊 Test Summary
          ${{ needs.qa-results-summary.outputs.test-summary || 'Test summary not available' }}
          
          ### 🔗 Links
          - [Failed Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### 🔧 Action Required
          - [ ] Review failed test cases
          - [ ] Fix underlying issues
          - [ ] Re-run tests to verify fixes
          - [ ] Update test cases if needed
          
          ### 📝 Notes
          This issue was automatically created when QA tests failed on the main branch.
          Please investigate and resolve the failures to maintain code quality.
          
          ---
          *Auto-generated by QA Automation Workflow*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['qa-failure', 'automated-testing', 'urgent']
          });

  # Notification on completion
  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [qa-results-summary]
    if: always()
    
    steps:
    - name: 📢 Send Notification
      run: |
        STATUS="${{ needs.qa-results-summary.outputs.deployment-approved }}"
        SUMMARY="${{ needs.qa-results-summary.outputs.test-summary }}"
        
        if [ "$STATUS" = "true" ]; then
          echo "✅ QA automation completed successfully!"
          echo "📊 Results: $SUMMARY"
          echo "🚀 Ready for deployment!"
        else
          echo "❌ QA automation found issues"
          echo "📊 Results: $SUMMARY"
          echo "🚫 Deployment blocked until issues are resolved"
        fi
