name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better secret detection
    
    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@v1.25.0
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  trufflehog-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/golang
          p/dockerfile
        generate_sarif: true
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        path: 
          - smor_ting_backend
          - smor_ting_mobile
          - cloudflare
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Scan Go dependencies
      if: matrix.path == 'smor_ting_backend'
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: '${{ matrix.path }}/govulncheck.sarif'
    
    - name: Install govulncheck
      if: matrix.path == 'smor_ting_backend'
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run govulncheck
      if: matrix.path == 'smor_ting_backend'
      run: |
        cd ${{ matrix.path }}
        govulncheck -json ./... > govulncheck.json || true
    
    - name: Scan Flutter dependencies
      if: matrix.path == 'smor_ting_mobile'
      run: |
        cd ${{ matrix.path }}
        flutter pub deps --json > deps.json || true
    
    - name: Scan Node.js dependencies
      if: matrix.path == 'cloudflare'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run npm audit
      if: matrix.path == 'cloudflare'
      run: |
        cd ${{ matrix.path }}
        npm audit --audit-level=moderate || true

  env-validation:
    name: Environment Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for .env files in commits
      run: |
        echo "Checking for .env files that shouldn't be committed..."
        if git ls-files | grep -E '\.(env|environment)($|\.)'; then
          echo "❌ Environment files found in git history!"
          echo "Found files:"
          git ls-files | grep -E '\.(env|environment)($|\.)'
          exit 1
        else
          echo "✅ No .env files found in repository"
        fi
    
    - name: Verify .env.example exists
      run: |
        if [ ! -f "smor_ting_backend/.env.example" ]; then
          echo "❌ .env.example template is missing!"
          exit 1
        else
          echo "✅ .env.example template exists"
        fi
    
    - name: Check for placeholder values in .env.example
      run: |
        echo "Checking .env.example for secure placeholder values..."
        if grep -E "(your_password|your_username|smorting_user|cluster0\.xxxxx)" smor_ting_backend/.env.example; then
          echo "❌ .env.example contains insecure placeholder values!"
          exit 1
        else
          echo "✅ .env.example uses secure placeholder values"
        fi

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov (Infrastructure as Code Security)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov.sarif
    
    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif
      if: always()

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, trufflehog-scan, semgrep-scan, dependency-scan, env-validation, infrastructure-scan]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Detection | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog | ${{ needs.trufflehog-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ needs.semgrep-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ needs.env-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure | ${{ needs.infrastructure-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Security Best Practices Enforced:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No hardcoded credentials allowed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Environment files excluded from repository" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secure .env.example template provided" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Infrastructure security validation" >> $GITHUB_STEP_SUMMARY
